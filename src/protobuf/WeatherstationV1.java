// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/weatherstation-v1.proto

package protobuf;

public final class WeatherstationV1 {
    private WeatherstationV1() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public interface MeasurementOrBuilder extends
            // @@protoc_insertion_point(interface_extends:protobuf.Measurement)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * station number
         * </pre>
         * <p>
         * <code>int32 station = 1;</code>
         */
        int getStation();

        /**
         * <pre>
         * *
         * Timestamp of received measurement
         * The actual measurement contains a date and time because there will not be
         * any measurements from before 1970-1-1 we can safely use a timestamp
         * </pre>
         * <p>
         * <code>int32 datetime = 2;</code>
         */
        int getDatetime();

        /**
         * <pre>
         * -9999.9 - 9999.9 in degrees celcius
         * </pre>
         * <p>
         * <code>float temperature = 3;</code>
         */
        float getTemperature();

        /**
         * <pre>
         * -9999.9 - 9999.9 in degrees celcius
         * </pre>
         * <p>
         * <code>float dewpoint = 4;</code>
         */
        float getDewpoint();

        /**
         * <pre>
         * 0.0 - 9999.9 in millibar (at station)
         * </pre>
         * <p>
         * <code>float station_air_pressure = 5;</code>
         */
        float getStationAirPressure();

        /**
         * <pre>
         * 0.0 - 9999.9 in millibar (at sea)
         * </pre>
         * <p>
         * <code>float sea_air_pressure = 6;</code>
         */
        float getSeaAirPressure();

        /**
         * <pre>
         * 0.0 - 999.9 in kilometers
         * </pre>
         * <p>
         * <code>float visibility = 7;</code>
         */
        float getVisibility();

        /**
         * <pre>
         * 0.0 - 999.9 in kilometers per hour
         * </pre>
         * <p>
         * <code>float windspeed = 8;</code>
         */
        float getWindspeed();

        /**
         * <pre>
         * 0.00 - 999.99 in centimeters
         * </pre>
         * <p>
         * <code>float precipitation = 9;</code>
         */
        float getPrecipitation();

        /**
         * <pre>
         * -9999.9 - 9999.99 in centimeters
         * </pre>
         * <p>
         * <code>float fallen_snow = 10;</code>
         */
        float getFallenSnow();

        /**
         * <pre>
         * events of this day - 0 if event didn't happen or 1 if it did
         * </pre>
         * <p>
         * <code>bool freeze = 11;</code>
         */
        boolean getFreeze();

        /**
         * <code>bool rain = 12;</code>
         */
        boolean getRain();

        /**
         * <code>bool snow = 13;</code>
         */
        boolean getSnow();

        /**
         * <code>bool hail = 14;</code>
         */
        boolean getHail();

        /**
         * <code>bool storm = 15;</code>
         */
        boolean getStorm();

        /**
         * <code>bool tornado = 16;</code>
         */
        boolean getTornado();

        /**
         * <pre>
         * 0.0 - 99.9 as percentage
         * </pre>
         * <p>
         * <code>float overcast = 17;</code>
         */
        float getOvercast();

        /**
         * <pre>
         * 0 - 359 in degrees
         * </pre>
         * <p>
         * <code>int32 wind_direction = 18;</code>
         */
        int getWindDirection();
    }

    /**
     * Protobuf type {@code protobuf.Measurement}
     */
    public static final class Measurement extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:protobuf.Measurement)
            MeasurementOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use Measurement.newBuilder() to construct.
        private Measurement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Measurement() {
            station_ = 0;
            datetime_ = 0;
            temperature_ = 0F;
            dewpoint_ = 0F;
            stationAirPressure_ = 0F;
            seaAirPressure_ = 0F;
            visibility_ = 0F;
            windspeed_ = 0F;
            precipitation_ = 0F;
            fallenSnow_ = 0F;
            freeze_ = false;
            rain_ = false;
            snow_ = false;
            hail_ = false;
            storm_ = false;
            tornado_ = false;
            overcast_ = 0F;
            windDirection_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Measurement(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownFieldProto3(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            station_ = input.readInt32();
                            break;
                        }
                        case 16: {

                            datetime_ = input.readInt32();
                            break;
                        }
                        case 29: {

                            temperature_ = input.readFloat();
                            break;
                        }
                        case 37: {

                            dewpoint_ = input.readFloat();
                            break;
                        }
                        case 45: {

                            stationAirPressure_ = input.readFloat();
                            break;
                        }
                        case 53: {

                            seaAirPressure_ = input.readFloat();
                            break;
                        }
                        case 61: {

                            visibility_ = input.readFloat();
                            break;
                        }
                        case 69: {

                            windspeed_ = input.readFloat();
                            break;
                        }
                        case 77: {

                            precipitation_ = input.readFloat();
                            break;
                        }
                        case 85: {

                            fallenSnow_ = input.readFloat();
                            break;
                        }
                        case 88: {

                            freeze_ = input.readBool();
                            break;
                        }
                        case 96: {

                            rain_ = input.readBool();
                            break;
                        }
                        case 104: {

                            snow_ = input.readBool();
                            break;
                        }
                        case 112: {

                            hail_ = input.readBool();
                            break;
                        }
                        case 120: {

                            storm_ = input.readBool();
                            break;
                        }
                        case 128: {

                            tornado_ = input.readBool();
                            break;
                        }
                        case 141: {

                            overcast_ = input.readFloat();
                            break;
                        }
                        case 144: {

                            windDirection_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return protobuf.WeatherstationV1.internal_static_protobuf_Measurement_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return protobuf.WeatherstationV1.internal_static_protobuf_Measurement_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            protobuf.WeatherstationV1.Measurement.class, protobuf.WeatherstationV1.Measurement.Builder.class);
        }

        public static final int STATION_FIELD_NUMBER = 1;
        private int station_;

        /**
         * <pre>
         * station number
         * </pre>
         * <p>
         * <code>int32 station = 1;</code>
         */
        public int getStation() {
            return station_;
        }

        public static final int DATETIME_FIELD_NUMBER = 2;
        private int datetime_;

        /**
         * <pre>
         * *
         * Timestamp of received measurement
         * The actual measurement contains a date and time because there will not be
         * any measurements from before 1970-1-1 we can safely use a timestamp
         * </pre>
         * <p>
         * <code>int32 datetime = 2;</code>
         */
        public int getDatetime() {
            return datetime_;
        }

        public static final int TEMPERATURE_FIELD_NUMBER = 3;
        private float temperature_;

        /**
         * <pre>
         * -9999.9 - 9999.9 in degrees celcius
         * </pre>
         * <p>
         * <code>float temperature = 3;</code>
         */
        public float getTemperature() {
            return temperature_;
        }

        public static final int DEWPOINT_FIELD_NUMBER = 4;
        private float dewpoint_;

        /**
         * <pre>
         * -9999.9 - 9999.9 in degrees celcius
         * </pre>
         * <p>
         * <code>float dewpoint = 4;</code>
         */
        public float getDewpoint() {
            return dewpoint_;
        }

        public static final int STATION_AIR_PRESSURE_FIELD_NUMBER = 5;
        private float stationAirPressure_;

        /**
         * <pre>
         * 0.0 - 9999.9 in millibar (at station)
         * </pre>
         * <p>
         * <code>float station_air_pressure = 5;</code>
         */
        public float getStationAirPressure() {
            return stationAirPressure_;
        }

        public static final int SEA_AIR_PRESSURE_FIELD_NUMBER = 6;
        private float seaAirPressure_;

        /**
         * <pre>
         * 0.0 - 9999.9 in millibar (at sea)
         * </pre>
         * <p>
         * <code>float sea_air_pressure = 6;</code>
         */
        public float getSeaAirPressure() {
            return seaAirPressure_;
        }

        public static final int VISIBILITY_FIELD_NUMBER = 7;
        private float visibility_;

        /**
         * <pre>
         * 0.0 - 999.9 in kilometers
         * </pre>
         * <p>
         * <code>float visibility = 7;</code>
         */
        public float getVisibility() {
            return visibility_;
        }

        public static final int WINDSPEED_FIELD_NUMBER = 8;
        private float windspeed_;

        /**
         * <pre>
         * 0.0 - 999.9 in kilometers per hour
         * </pre>
         * <p>
         * <code>float windspeed = 8;</code>
         */
        public float getWindspeed() {
            return windspeed_;
        }

        public static final int PRECIPITATION_FIELD_NUMBER = 9;
        private float precipitation_;

        /**
         * <pre>
         * 0.00 - 999.99 in centimeters
         * </pre>
         * <p>
         * <code>float precipitation = 9;</code>
         */
        public float getPrecipitation() {
            return precipitation_;
        }

        public static final int FALLEN_SNOW_FIELD_NUMBER = 10;
        private float fallenSnow_;

        /**
         * <pre>
         * -9999.9 - 9999.99 in centimeters
         * </pre>
         * <p>
         * <code>float fallen_snow = 10;</code>
         */
        public float getFallenSnow() {
            return fallenSnow_;
        }

        public static final int FREEZE_FIELD_NUMBER = 11;
        private boolean freeze_;

        /**
         * <pre>
         * events of this day - 0 if event didn't happen or 1 if it did
         * </pre>
         * <p>
         * <code>bool freeze = 11;</code>
         */
        public boolean getFreeze() {
            return freeze_;
        }

        public static final int RAIN_FIELD_NUMBER = 12;
        private boolean rain_;

        /**
         * <code>bool rain = 12;</code>
         */
        public boolean getRain() {
            return rain_;
        }

        public static final int SNOW_FIELD_NUMBER = 13;
        private boolean snow_;

        /**
         * <code>bool snow = 13;</code>
         */
        public boolean getSnow() {
            return snow_;
        }

        public static final int HAIL_FIELD_NUMBER = 14;
        private boolean hail_;

        /**
         * <code>bool hail = 14;</code>
         */
        public boolean getHail() {
            return hail_;
        }

        public static final int STORM_FIELD_NUMBER = 15;
        private boolean storm_;

        /**
         * <code>bool storm = 15;</code>
         */
        public boolean getStorm() {
            return storm_;
        }

        public static final int TORNADO_FIELD_NUMBER = 16;
        private boolean tornado_;

        /**
         * <code>bool tornado = 16;</code>
         */
        public boolean getTornado() {
            return tornado_;
        }

        public static final int OVERCAST_FIELD_NUMBER = 17;
        private float overcast_;

        /**
         * <pre>
         * 0.0 - 99.9 as percentage
         * </pre>
         * <p>
         * <code>float overcast = 17;</code>
         */
        public float getOvercast() {
            return overcast_;
        }

        public static final int WIND_DIRECTION_FIELD_NUMBER = 18;
        private int windDirection_;

        /**
         * <pre>
         * 0 - 359 in degrees
         * </pre>
         * <p>
         * <code>int32 wind_direction = 18;</code>
         */
        public int getWindDirection() {
            return windDirection_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (station_ != 0) {
                output.writeInt32(1, station_);
            }
            if (datetime_ != 0) {
                output.writeInt32(2, datetime_);
            }
            if (temperature_ != 0F) {
                output.writeFloat(3, temperature_);
            }
            if (dewpoint_ != 0F) {
                output.writeFloat(4, dewpoint_);
            }
            if (stationAirPressure_ != 0F) {
                output.writeFloat(5, stationAirPressure_);
            }
            if (seaAirPressure_ != 0F) {
                output.writeFloat(6, seaAirPressure_);
            }
            if (visibility_ != 0F) {
                output.writeFloat(7, visibility_);
            }
            if (windspeed_ != 0F) {
                output.writeFloat(8, windspeed_);
            }
            if (precipitation_ != 0F) {
                output.writeFloat(9, precipitation_);
            }
            if (fallenSnow_ != 0F) {
                output.writeFloat(10, fallenSnow_);
            }
            if (freeze_ != false) {
                output.writeBool(11, freeze_);
            }
            if (rain_ != false) {
                output.writeBool(12, rain_);
            }
            if (snow_ != false) {
                output.writeBool(13, snow_);
            }
            if (hail_ != false) {
                output.writeBool(14, hail_);
            }
            if (storm_ != false) {
                output.writeBool(15, storm_);
            }
            if (tornado_ != false) {
                output.writeBool(16, tornado_);
            }
            if (overcast_ != 0F) {
                output.writeFloat(17, overcast_);
            }
            if (windDirection_ != 0) {
                output.writeInt32(18, windDirection_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (station_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, station_);
            }
            if (datetime_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, datetime_);
            }
            if (temperature_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(3, temperature_);
            }
            if (dewpoint_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(4, dewpoint_);
            }
            if (stationAirPressure_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(5, stationAirPressure_);
            }
            if (seaAirPressure_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(6, seaAirPressure_);
            }
            if (visibility_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(7, visibility_);
            }
            if (windspeed_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(8, windspeed_);
            }
            if (precipitation_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(9, precipitation_);
            }
            if (fallenSnow_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(10, fallenSnow_);
            }
            if (freeze_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(11, freeze_);
            }
            if (rain_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(12, rain_);
            }
            if (snow_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(13, snow_);
            }
            if (hail_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(14, hail_);
            }
            if (storm_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(15, storm_);
            }
            if (tornado_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(16, tornado_);
            }
            if (overcast_ != 0F) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(17, overcast_);
            }
            if (windDirection_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(18, windDirection_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof protobuf.WeatherstationV1.Measurement)) {
                return super.equals(obj);
            }
            protobuf.WeatherstationV1.Measurement other = (protobuf.WeatherstationV1.Measurement) obj;

            boolean result = true;
            result = result && (getStation()
                    == other.getStation());
            result = result && (getDatetime()
                    == other.getDatetime());
            result = result && (
                    java.lang.Float.floatToIntBits(getTemperature())
                            == java.lang.Float.floatToIntBits(
                            other.getTemperature()));
            result = result && (
                    java.lang.Float.floatToIntBits(getDewpoint())
                            == java.lang.Float.floatToIntBits(
                            other.getDewpoint()));
            result = result && (
                    java.lang.Float.floatToIntBits(getStationAirPressure())
                            == java.lang.Float.floatToIntBits(
                            other.getStationAirPressure()));
            result = result && (
                    java.lang.Float.floatToIntBits(getSeaAirPressure())
                            == java.lang.Float.floatToIntBits(
                            other.getSeaAirPressure()));
            result = result && (
                    java.lang.Float.floatToIntBits(getVisibility())
                            == java.lang.Float.floatToIntBits(
                            other.getVisibility()));
            result = result && (
                    java.lang.Float.floatToIntBits(getWindspeed())
                            == java.lang.Float.floatToIntBits(
                            other.getWindspeed()));
            result = result && (
                    java.lang.Float.floatToIntBits(getPrecipitation())
                            == java.lang.Float.floatToIntBits(
                            other.getPrecipitation()));
            result = result && (
                    java.lang.Float.floatToIntBits(getFallenSnow())
                            == java.lang.Float.floatToIntBits(
                            other.getFallenSnow()));
            result = result && (getFreeze()
                    == other.getFreeze());
            result = result && (getRain()
                    == other.getRain());
            result = result && (getSnow()
                    == other.getSnow());
            result = result && (getHail()
                    == other.getHail());
            result = result && (getStorm()
                    == other.getStorm());
            result = result && (getTornado()
                    == other.getTornado());
            result = result && (
                    java.lang.Float.floatToIntBits(getOvercast())
                            == java.lang.Float.floatToIntBits(
                            other.getOvercast()));
            result = result && (getWindDirection()
                    == other.getWindDirection());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + STATION_FIELD_NUMBER;
            hash = (53 * hash) + getStation();
            hash = (37 * hash) + DATETIME_FIELD_NUMBER;
            hash = (53 * hash) + getDatetime();
            hash = (37 * hash) + TEMPERATURE_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getTemperature());
            hash = (37 * hash) + DEWPOINT_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getDewpoint());
            hash = (37 * hash) + STATION_AIR_PRESSURE_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getStationAirPressure());
            hash = (37 * hash) + SEA_AIR_PRESSURE_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getSeaAirPressure());
            hash = (37 * hash) + VISIBILITY_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getVisibility());
            hash = (37 * hash) + WINDSPEED_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getWindspeed());
            hash = (37 * hash) + PRECIPITATION_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getPrecipitation());
            hash = (37 * hash) + FALLEN_SNOW_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getFallenSnow());
            hash = (37 * hash) + FREEZE_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getFreeze());
            hash = (37 * hash) + RAIN_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getRain());
            hash = (37 * hash) + SNOW_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getSnow());
            hash = (37 * hash) + HAIL_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getHail());
            hash = (37 * hash) + STORM_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getStorm());
            hash = (37 * hash) + TORNADO_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getTornado());
            hash = (37 * hash) + OVERCAST_FIELD_NUMBER;
            hash = (53 * hash) + java.lang.Float.floatToIntBits(
                    getOvercast());
            hash = (37 * hash) + WIND_DIRECTION_FIELD_NUMBER;
            hash = (53 * hash) + getWindDirection();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static protobuf.WeatherstationV1.Measurement parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static protobuf.WeatherstationV1.Measurement parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static protobuf.WeatherstationV1.Measurement parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(protobuf.WeatherstationV1.Measurement prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code protobuf.Measurement}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:protobuf.Measurement)
                protobuf.WeatherstationV1.MeasurementOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return protobuf.WeatherstationV1.internal_static_protobuf_Measurement_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return protobuf.WeatherstationV1.internal_static_protobuf_Measurement_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                protobuf.WeatherstationV1.Measurement.class, protobuf.WeatherstationV1.Measurement.Builder.class);
            }

            // Construct using protobuf.WeatherstationV1.Measurement.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                station_ = 0;

                datetime_ = 0;

                temperature_ = 0F;

                dewpoint_ = 0F;

                stationAirPressure_ = 0F;

                seaAirPressure_ = 0F;

                visibility_ = 0F;

                windspeed_ = 0F;

                precipitation_ = 0F;

                fallenSnow_ = 0F;

                freeze_ = false;

                rain_ = false;

                snow_ = false;

                hail_ = false;

                storm_ = false;

                tornado_ = false;

                overcast_ = 0F;

                windDirection_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return protobuf.WeatherstationV1.internal_static_protobuf_Measurement_descriptor;
            }

            public protobuf.WeatherstationV1.Measurement getDefaultInstanceForType() {
                return protobuf.WeatherstationV1.Measurement.getDefaultInstance();
            }

            public protobuf.WeatherstationV1.Measurement build() {
                protobuf.WeatherstationV1.Measurement result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public protobuf.WeatherstationV1.Measurement buildPartial() {
                protobuf.WeatherstationV1.Measurement result = new protobuf.WeatherstationV1.Measurement(this);
                result.station_ = station_;
                result.datetime_ = datetime_;
                result.temperature_ = temperature_;
                result.dewpoint_ = dewpoint_;
                result.stationAirPressure_ = stationAirPressure_;
                result.seaAirPressure_ = seaAirPressure_;
                result.visibility_ = visibility_;
                result.windspeed_ = windspeed_;
                result.precipitation_ = precipitation_;
                result.fallenSnow_ = fallenSnow_;
                result.freeze_ = freeze_;
                result.rain_ = rain_;
                result.snow_ = snow_;
                result.hail_ = hail_;
                result.storm_ = storm_;
                result.tornado_ = tornado_;
                result.overcast_ = overcast_;
                result.windDirection_ = windDirection_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    java.lang.Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, java.lang.Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    java.lang.Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof protobuf.WeatherstationV1.Measurement) {
                    return mergeFrom((protobuf.WeatherstationV1.Measurement) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(protobuf.WeatherstationV1.Measurement other) {
                if (other == protobuf.WeatherstationV1.Measurement.getDefaultInstance()) return this;
                if (other.getStation() != 0) {
                    setStation(other.getStation());
                }
                if (other.getDatetime() != 0) {
                    setDatetime(other.getDatetime());
                }
                if (other.getTemperature() != 0F) {
                    setTemperature(other.getTemperature());
                }
                if (other.getDewpoint() != 0F) {
                    setDewpoint(other.getDewpoint());
                }
                if (other.getStationAirPressure() != 0F) {
                    setStationAirPressure(other.getStationAirPressure());
                }
                if (other.getSeaAirPressure() != 0F) {
                    setSeaAirPressure(other.getSeaAirPressure());
                }
                if (other.getVisibility() != 0F) {
                    setVisibility(other.getVisibility());
                }
                if (other.getWindspeed() != 0F) {
                    setWindspeed(other.getWindspeed());
                }
                if (other.getPrecipitation() != 0F) {
                    setPrecipitation(other.getPrecipitation());
                }
                if (other.getFallenSnow() != 0F) {
                    setFallenSnow(other.getFallenSnow());
                }
                if (other.getFreeze() != false) {
                    setFreeze(other.getFreeze());
                }
                if (other.getRain() != false) {
                    setRain(other.getRain());
                }
                if (other.getSnow() != false) {
                    setSnow(other.getSnow());
                }
                if (other.getHail() != false) {
                    setHail(other.getHail());
                }
                if (other.getStorm() != false) {
                    setStorm(other.getStorm());
                }
                if (other.getTornado() != false) {
                    setTornado(other.getTornado());
                }
                if (other.getOvercast() != 0F) {
                    setOvercast(other.getOvercast());
                }
                if (other.getWindDirection() != 0) {
                    setWindDirection(other.getWindDirection());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                protobuf.WeatherstationV1.Measurement parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (protobuf.WeatherstationV1.Measurement) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int station_;

            /**
             * <pre>
             * station number
             * </pre>
             * <p>
             * <code>int32 station = 1;</code>
             */
            public int getStation() {
                return station_;
            }

            /**
             * <pre>
             * station number
             * </pre>
             * <p>
             * <code>int32 station = 1;</code>
             */
            public Builder setStation(int value) {

                station_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * station number
             * </pre>
             * <p>
             * <code>int32 station = 1;</code>
             */
            public Builder clearStation() {

                station_ = 0;
                onChanged();
                return this;
            }

            private int datetime_;

            /**
             * <pre>
             * *
             * Timestamp of received measurement
             * The actual measurement contains a date and time because there will not be
             * any measurements from before 1970-1-1 we can safely use a timestamp
             * </pre>
             * <p>
             * <code>int32 datetime = 2;</code>
             */
            public int getDatetime() {
                return datetime_;
            }

            /**
             * <pre>
             * *
             * Timestamp of received measurement
             * The actual measurement contains a date and time because there will not be
             * any measurements from before 1970-1-1 we can safely use a timestamp
             * </pre>
             * <p>
             * <code>int32 datetime = 2;</code>
             */
            public Builder setDatetime(int value) {

                datetime_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * *
             * Timestamp of received measurement
             * The actual measurement contains a date and time because there will not be
             * any measurements from before 1970-1-1 we can safely use a timestamp
             * </pre>
             * <p>
             * <code>int32 datetime = 2;</code>
             */
            public Builder clearDatetime() {

                datetime_ = 0;
                onChanged();
                return this;
            }

            private float temperature_;

            /**
             * <pre>
             * -9999.9 - 9999.9 in degrees celcius
             * </pre>
             * <p>
             * <code>float temperature = 3;</code>
             */
            public float getTemperature() {
                return temperature_;
            }

            /**
             * <pre>
             * -9999.9 - 9999.9 in degrees celcius
             * </pre>
             * <p>
             * <code>float temperature = 3;</code>
             */
            public Builder setTemperature(float value) {

                temperature_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * -9999.9 - 9999.9 in degrees celcius
             * </pre>
             * <p>
             * <code>float temperature = 3;</code>
             */
            public Builder clearTemperature() {

                temperature_ = 0F;
                onChanged();
                return this;
            }

            private float dewpoint_;

            /**
             * <pre>
             * -9999.9 - 9999.9 in degrees celcius
             * </pre>
             * <p>
             * <code>float dewpoint = 4;</code>
             */
            public float getDewpoint() {
                return dewpoint_;
            }

            /**
             * <pre>
             * -9999.9 - 9999.9 in degrees celcius
             * </pre>
             * <p>
             * <code>float dewpoint = 4;</code>
             */
            public Builder setDewpoint(float value) {

                dewpoint_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * -9999.9 - 9999.9 in degrees celcius
             * </pre>
             * <p>
             * <code>float dewpoint = 4;</code>
             */
            public Builder clearDewpoint() {

                dewpoint_ = 0F;
                onChanged();
                return this;
            }

            private float stationAirPressure_;

            /**
             * <pre>
             * 0.0 - 9999.9 in millibar (at station)
             * </pre>
             * <p>
             * <code>float station_air_pressure = 5;</code>
             */
            public float getStationAirPressure() {
                return stationAirPressure_;
            }

            /**
             * <pre>
             * 0.0 - 9999.9 in millibar (at station)
             * </pre>
             * <p>
             * <code>float station_air_pressure = 5;</code>
             */
            public Builder setStationAirPressure(float value) {

                stationAirPressure_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0.0 - 9999.9 in millibar (at station)
             * </pre>
             * <p>
             * <code>float station_air_pressure = 5;</code>
             */
            public Builder clearStationAirPressure() {

                stationAirPressure_ = 0F;
                onChanged();
                return this;
            }

            private float seaAirPressure_;

            /**
             * <pre>
             * 0.0 - 9999.9 in millibar (at sea)
             * </pre>
             * <p>
             * <code>float sea_air_pressure = 6;</code>
             */
            public float getSeaAirPressure() {
                return seaAirPressure_;
            }

            /**
             * <pre>
             * 0.0 - 9999.9 in millibar (at sea)
             * </pre>
             * <p>
             * <code>float sea_air_pressure = 6;</code>
             */
            public Builder setSeaAirPressure(float value) {

                seaAirPressure_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0.0 - 9999.9 in millibar (at sea)
             * </pre>
             * <p>
             * <code>float sea_air_pressure = 6;</code>
             */
            public Builder clearSeaAirPressure() {

                seaAirPressure_ = 0F;
                onChanged();
                return this;
            }

            private float visibility_;

            /**
             * <pre>
             * 0.0 - 999.9 in kilometers
             * </pre>
             * <p>
             * <code>float visibility = 7;</code>
             */
            public float getVisibility() {
                return visibility_;
            }

            /**
             * <pre>
             * 0.0 - 999.9 in kilometers
             * </pre>
             * <p>
             * <code>float visibility = 7;</code>
             */
            public Builder setVisibility(float value) {

                visibility_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0.0 - 999.9 in kilometers
             * </pre>
             * <p>
             * <code>float visibility = 7;</code>
             */
            public Builder clearVisibility() {

                visibility_ = 0F;
                onChanged();
                return this;
            }

            private float windspeed_;

            /**
             * <pre>
             * 0.0 - 999.9 in kilometers per hour
             * </pre>
             * <p>
             * <code>float windspeed = 8;</code>
             */
            public float getWindspeed() {
                return windspeed_;
            }

            /**
             * <pre>
             * 0.0 - 999.9 in kilometers per hour
             * </pre>
             * <p>
             * <code>float windspeed = 8;</code>
             */
            public Builder setWindspeed(float value) {

                windspeed_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0.0 - 999.9 in kilometers per hour
             * </pre>
             * <p>
             * <code>float windspeed = 8;</code>
             */
            public Builder clearWindspeed() {

                windspeed_ = 0F;
                onChanged();
                return this;
            }

            private float precipitation_;

            /**
             * <pre>
             * 0.00 - 999.99 in centimeters
             * </pre>
             * <p>
             * <code>float precipitation = 9;</code>
             */
            public float getPrecipitation() {
                return precipitation_;
            }

            /**
             * <pre>
             * 0.00 - 999.99 in centimeters
             * </pre>
             * <p>
             * <code>float precipitation = 9;</code>
             */
            public Builder setPrecipitation(float value) {

                precipitation_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0.00 - 999.99 in centimeters
             * </pre>
             * <p>
             * <code>float precipitation = 9;</code>
             */
            public Builder clearPrecipitation() {

                precipitation_ = 0F;
                onChanged();
                return this;
            }

            private float fallenSnow_;

            /**
             * <pre>
             * -9999.9 - 9999.99 in centimeters
             * </pre>
             * <p>
             * <code>float fallen_snow = 10;</code>
             */
            public float getFallenSnow() {
                return fallenSnow_;
            }

            /**
             * <pre>
             * -9999.9 - 9999.99 in centimeters
             * </pre>
             * <p>
             * <code>float fallen_snow = 10;</code>
             */
            public Builder setFallenSnow(float value) {

                fallenSnow_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * -9999.9 - 9999.99 in centimeters
             * </pre>
             * <p>
             * <code>float fallen_snow = 10;</code>
             */
            public Builder clearFallenSnow() {

                fallenSnow_ = 0F;
                onChanged();
                return this;
            }

            private boolean freeze_;

            /**
             * <pre>
             * events of this day - 0 if event didn't happen or 1 if it did
             * </pre>
             * <p>
             * <code>bool freeze = 11;</code>
             */
            public boolean getFreeze() {
                return freeze_;
            }

            /**
             * <pre>
             * events of this day - 0 if event didn't happen or 1 if it did
             * </pre>
             * <p>
             * <code>bool freeze = 11;</code>
             */
            public Builder setFreeze(boolean value) {

                freeze_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * events of this day - 0 if event didn't happen or 1 if it did
             * </pre>
             * <p>
             * <code>bool freeze = 11;</code>
             */
            public Builder clearFreeze() {

                freeze_ = false;
                onChanged();
                return this;
            }

            private boolean rain_;

            /**
             * <code>bool rain = 12;</code>
             */
            public boolean getRain() {
                return rain_;
            }

            /**
             * <code>bool rain = 12;</code>
             */
            public Builder setRain(boolean value) {

                rain_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool rain = 12;</code>
             */
            public Builder clearRain() {

                rain_ = false;
                onChanged();
                return this;
            }

            private boolean snow_;

            /**
             * <code>bool snow = 13;</code>
             */
            public boolean getSnow() {
                return snow_;
            }

            /**
             * <code>bool snow = 13;</code>
             */
            public Builder setSnow(boolean value) {

                snow_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool snow = 13;</code>
             */
            public Builder clearSnow() {

                snow_ = false;
                onChanged();
                return this;
            }

            private boolean hail_;

            /**
             * <code>bool hail = 14;</code>
             */
            public boolean getHail() {
                return hail_;
            }

            /**
             * <code>bool hail = 14;</code>
             */
            public Builder setHail(boolean value) {

                hail_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool hail = 14;</code>
             */
            public Builder clearHail() {

                hail_ = false;
                onChanged();
                return this;
            }

            private boolean storm_;

            /**
             * <code>bool storm = 15;</code>
             */
            public boolean getStorm() {
                return storm_;
            }

            /**
             * <code>bool storm = 15;</code>
             */
            public Builder setStorm(boolean value) {

                storm_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool storm = 15;</code>
             */
            public Builder clearStorm() {

                storm_ = false;
                onChanged();
                return this;
            }

            private boolean tornado_;

            /**
             * <code>bool tornado = 16;</code>
             */
            public boolean getTornado() {
                return tornado_;
            }

            /**
             * <code>bool tornado = 16;</code>
             */
            public Builder setTornado(boolean value) {

                tornado_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>bool tornado = 16;</code>
             */
            public Builder clearTornado() {

                tornado_ = false;
                onChanged();
                return this;
            }

            private float overcast_;

            /**
             * <pre>
             * 0.0 - 99.9 as percentage
             * </pre>
             * <p>
             * <code>float overcast = 17;</code>
             */
            public float getOvercast() {
                return overcast_;
            }

            /**
             * <pre>
             * 0.0 - 99.9 as percentage
             * </pre>
             * <p>
             * <code>float overcast = 17;</code>
             */
            public Builder setOvercast(float value) {

                overcast_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0.0 - 99.9 as percentage
             * </pre>
             * <p>
             * <code>float overcast = 17;</code>
             */
            public Builder clearOvercast() {

                overcast_ = 0F;
                onChanged();
                return this;
            }

            private int windDirection_;

            /**
             * <pre>
             * 0 - 359 in degrees
             * </pre>
             * <p>
             * <code>int32 wind_direction = 18;</code>
             */
            public int getWindDirection() {
                return windDirection_;
            }

            /**
             * <pre>
             * 0 - 359 in degrees
             * </pre>
             * <p>
             * <code>int32 wind_direction = 18;</code>
             */
            public Builder setWindDirection(int value) {

                windDirection_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 0 - 359 in degrees
             * </pre>
             * <p>
             * <code>int32 wind_direction = 18;</code>
             */
            public Builder clearWindDirection() {

                windDirection_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFieldsProto3(unknownFields);
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:protobuf.Measurement)
        }

        // @@protoc_insertion_point(class_scope:protobuf.Measurement)
        private static final protobuf.WeatherstationV1.Measurement DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new protobuf.WeatherstationV1.Measurement();
        }

        public static protobuf.WeatherstationV1.Measurement getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Measurement>
                PARSER = new com.google.protobuf.AbstractParser<Measurement>() {
            public Measurement parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Measurement(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Measurement> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Measurement> getParserForType() {
            return PARSER;
        }

        public protobuf.WeatherstationV1.Measurement getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_protobuf_Measurement_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_protobuf_Measurement_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\035proto/weatherstation-v1.proto\022\010protobu" +
                        "f\"\346\002\n\013Measurement\022\017\n\007station\030\001 \001(\005\022\020\n\010da" +
                        "tetime\030\002 \001(\005\022\023\n\013temperature\030\003 \001(\002\022\020\n\010dew" +
                        "point\030\004 \001(\002\022\034\n\024station_air_pressure\030\005 \001(" +
                        "\002\022\030\n\020sea_air_pressure\030\006 \001(\002\022\022\n\nvisibilit" +
                        "y\030\007 \001(\002\022\021\n\twindspeed\030\010 \001(\002\022\025\n\rprecipitat" +
                        "ion\030\t \001(\002\022\023\n\013fallen_snow\030\n \001(\002\022\016\n\006freeze" +
                        "\030\013 \001(\010\022\014\n\004rain\030\014 \001(\010\022\014\n\004snow\030\r \001(\010\022\014\n\004ha" +
                        "il\030\016 \001(\010\022\r\n\005storm\030\017 \001(\010\022\017\n\007tornado\030\020 \001(\010" +
                        "\022\020\n\010overcast\030\021 \001(\002\022\026\n\016wind_direction\030\022 \001" +
                        "(\005B\002H\001b\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_protobuf_Measurement_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_protobuf_Measurement_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_protobuf_Measurement_descriptor,
                new java.lang.String[]{"Station", "Datetime", "Temperature", "Dewpoint", "StationAirPressure", "SeaAirPressure", "Visibility", "Windspeed", "Precipitation", "FallenSnow", "Freeze", "Rain", "Snow", "Hail", "Storm", "Tornado", "Overcast", "WindDirection",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
